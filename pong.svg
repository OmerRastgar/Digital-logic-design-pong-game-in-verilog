// Code your design here
// Code your design here
`timescale 1ns / 1ps

module h_counter(clk,h_count,trig_v); 
  input clk;
  output trig_v;
  reg trig_v;
  output [9:0] h_count;
  reg [9:0] h_count;
  initial
    begin
      h_count <= 0;
      trig_v <= 0;
    end
  always @(posedge clk) 
    begin 
      if (h_count < 799) 
        begin
          h_count <= h_count + 1;
          trig_v <= 0;
        end
      else 
        begin 
          h_count <= 0;
          trig_v <= 1;
        end 
    end 
endmodule 

//--------------------------------------------------------------------

// Code your design here
// Code your design here
module v_counter(clk,v_count,enable_v); 
  input clk;
  
  input enable_v;
  //wire enable_v;
  
  output [9:0] v_count;
  reg [9:0] v_count;
  
  initial
    begin
      v_count <= 0;
    end

  always @ (posedge clk) 
    begin
      if (enable_v == 1)
        begin
          if (v_count < 524) 
            begin 
              v_count <= v_count + 1; 
            end 
          else 
            begin 
              v_count <= 0;
            end 
        end
      else
        begin
          v_count <= v_count+0;
        end
    end 

endmodule 


//------------------------------------------------------------------------

// Code your design here
module clk_div (clk,clk_d);
  parameter div_value = 1;
  input clk;
  output clk_d;
  reg clk_d;
  reg count;
  initial
    begin
      clk_d = 0;
      count = 0;
    end
  always @(posedge clk)
    begin
      if (count == div_value)
        count <=0;
      else
        count <=count + 1;
    end
  
  always @(posedge clk)
    begin
      if (count==div_value)
        clk_d <= ~ clk_d;
    end
endmodule

//---------------------------------------------------------------------------


`timescale 1ns / 1ps
module vga_sync (
  input [9:0] h_count,
  input [9:0] v_count,
  output h_sync,
  output v_sync,
  output video_on,
  output [9:0] x_loc,
  output [9:0] y_loc);
  
  localparam HD = 640;
  localparam HF = 16;
  localparam HB = 48;
  localparam HR = 96;
  
  localparam VD = 480;
  localparam VF = 10;
  localparam VB = 33;
  localparam VR = 2;
  
  assign x_loc = h_count;
  assign y_loc = v_count;
  
  assign h_sync = (h_count<(656)) || (h_count>752);
  
  assign v_sync = (v_count<490) || (v_count>492);
  
  assign video_on = (h_count<640) || (v_count<480);
  
endmodule

//------------------------------------------------------------------------------------

module pixel_gen(
  input clk_d,
  input [9:0] pixel_x,
  input [9:0] pixel_y,
  input video_on,
  output reg [3:0] red=0,
  output reg [3:0] green=0,
  output reg [3:0] blue=0,
  input [9:0] xcoordball,
  input [9:0] ycoordball,
  input [9:0] xcoordpad
);
  reg ball;
  reg paddle1;
  
  
  always @(posedge clk_d) begin
    if (pixel_x>640) begin
      red <= 4'hF;
      green <= 4'hF;
      blue <= 4'hF;
    end
    else 
      begin
        assign ball = ((pixel_x >=(xcoordball-8) && pixel_x<=(xcoordball+8))&&(pixel_y >=(ycoordball-8) && pixel_y<=(ycoordball+8))); //coordinates and +- is pixel size
                       
        assign paddle1 = ((pixel_x >=(xcoordpad-40)&&pixel_x<=(xcoordpad+40))&&(pixel_y >=462 && pixel_y<=474));
        
        red <= video_on ? (((ball||paddle1) ? 4'hF : 4'h0)) : (4'h0);
        green <= video_on ? (((ball||paddle1) ? 4'hF : 4'h0)) : (4'h0);
        blue <= video_on ? (((ball||paddle1) ? 4'hF : 4'h0)) : (4'h0);
      
      end
  end
endmodule

//-----------------------------------------------------------------------------------------



module toplevel(clk,h_sync, v_sync, R, G, B );
  input clk;
  output h_sync;
  output v_sync;
  wire [9:0] HC; 
  wire [9:0] VC; 
  output [3:0] R;
  output [3:0] G;
  output [3:0] B; 
  output clk_D; 
  wire tgv;
  wire v_on;
  wire [9:0] xloc;
  wire [9:0] yloc;
  input [9:0] xcoordball;
  input [9:0] ycoordball;
  input [9:0] xcoordpad;
  assign xcoordball = 320;
  assign ycoordball = 140;
  assign xcoordpad = 320;
      
  clk_div g0(.clk(clk), .clk_d(clk_D));
      
      
  h_counter a1(.clk(clk_D), .h_count(HC), .trig_v(tgv)); 
  v_counter a2(.enable_v(tgv), .clk(clk_D), .v_count(VC));
  
  
  vga_sync a3(.h_count(HC), .v_count(VC), .h_sync(h_sync), .v_sync(v_sync), .video_on(v_on), .x_loc(xloc), .y_loc(yloc));
           
  pixel_gen a4(.clk_d(clk_D), .pixel_x(xloc), .pixel_y(yloc), .video_on(v_on), .red(R), .green(G), .blue(B),.xcoordball(xcoordball),.ycoordball(ycoordball),.xcoordpad(xcoordpad));
  
endmodule








